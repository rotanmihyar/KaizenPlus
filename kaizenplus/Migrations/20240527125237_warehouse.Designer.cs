// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using kaizenplus.DataAccess;

#nullable disable

namespace kaizenplus.Migrations
{
    [DbContext(typeof(DatabaseService))]
    [Migration("20240527125237_warehouse")]
    partial class warehouse
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.0");

            modelBuilder.Entity("kaizenplus.Domain.Countries.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Jordan"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Germany"
                        });
                });

            modelBuilder.Entity("kaizenplus.Domain.Roles.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Management"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Auditor"
                        });
                });

            modelBuilder.Entity("kaizenplus.Domain.UserRoles.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("8240573d-becc-4aae-b2ab-974979de96a1"),
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("kaizenplus.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("Picture")
                        .HasColumnType("TEXT");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RefreshTokenValidUntil")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8240573d-becc-4aae-b2ab-974979de96a1"),
                            Active = true,
                            CreatedDate = new DateTime(1989, 8, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin@happywarehouse.com",
                            FirstName = "system",
                            IsVerified = true,
                            LastName = "admin",
                            PasswordHash = new byte[] { 157, 68, 78, 116, 244, 25, 154, 9, 121, 242, 173, 188, 6, 191, 56, 166, 98, 152, 213, 11, 222, 17, 11, 184, 79, 105, 229, 200, 87, 56, 186, 118, 192, 185, 179, 109, 108, 33, 175, 251, 116, 212, 45, 112, 21, 133, 0, 217, 10, 187, 206, 151, 80, 86, 133, 79, 216, 71, 230, 127, 58, 30, 138, 235 },
                            PasswordSalt = new byte[] { 156, 200, 63, 182, 150, 178, 42, 13, 162, 26, 216, 55, 199, 167, 180, 1, 14, 75, 247, 206, 37, 210, 103, 26, 167, 220, 155, 199, 214, 118, 94, 104, 79, 221, 117, 78, 48, 81, 110, 168, 213, 107, 201, 166, 135, 180, 79, 62, 80, 168, 220, 23, 85, 213, 233, 78, 154, 172, 117, 131, 186, 143, 109, 233, 123, 219, 40, 168, 147, 184, 58, 8, 2, 66, 22, 16, 168, 22, 69, 49, 140, 182, 128, 113, 86, 25, 57, 152, 165, 11, 203, 116, 111, 169, 178, 15, 175, 139, 147, 104, 138, 161, 99, 219, 42, 246, 52, 61, 153, 135, 190, 19, 27, 227, 165, 178, 126, 107, 251, 41, 98, 117, 66, 55, 77, 108, 92, 181 },
                            PhoneNumber = "07950430205",
                            Username = "admin@happywarehouse.com"
                        });
                });

            modelBuilder.Entity("kaizenplus.Domain.Warehouses.Warehouse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<long>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DeletedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UpdatedById")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeletedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("kaizenplus.Domain.UserRoles.UserRole", b =>
                {
                    b.HasOne("kaizenplus.Domain.Roles.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("kaizenplus.Domain.Users.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("kaizenplus.Domain.Warehouses.Warehouse", b =>
                {
                    b.HasOne("kaizenplus.Domain.Countries.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("kaizenplus.Domain.Users.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("kaizenplus.Domain.Users.User", "DeletedBy")
                        .WithMany()
                        .HasForeignKey("DeletedById");

                    b.HasOne("kaizenplus.Domain.Users.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById");

                    b.Navigation("Country");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("kaizenplus.Domain.Roles.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("kaizenplus.Domain.Users.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
