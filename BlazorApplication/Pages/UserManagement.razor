@page "/Usermanagement"
@inject HttpClient Http
@inject IJSRuntime jsRuntime
@inject ILocalStorageService localStorage 
@using BlazorApplication.Models
@using System.Text.Json
@using System.Text;
@using Blazored.LocalStorage;
@using System.Net.Http.Headers;
@using Microsoft.AspNetCore.Authorization;
@using static BlazorApplication.Pages.UserManagement;
@inject IConfiguration configuration
@attribute [Authorize]
<PageTitle>User Management</PageTitle>

<h1>User Management</h1>

@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{  <p><em>Current user Wouldn't appear in this table...</em></p>
    <table class="table">
        <thead>
            <tr>
                <th>Username</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Email</th>
                <th>Roles</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users.data)
            {
                <tr>
                    <td>@user.username</td>
                    <td>@user.firstName</td>
                    <td>@user.lastName</td>
                    <td>@user.email</td>
                    <td>
                        @foreach (var role in user.roles)
                        {
                            <span>@role.name</span>
                            <br />
                        }
                    </td>
                    <td>
                        @if (!IsAdmin(user))
                        {
                            <button class="btn btn-primary" @onclick="() => ChangePassword(user)">Change Password</button>
                            <button class="btn btn-danger" @onclick="() => DeleteUser(user)">Delete</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<h2>Register New User</h2>

<form @onsubmit="RegisterUser">
    <div class="form-group">
        <label for="username">Username</label>
        <input type="text" class="form-control" id="username" @bind="registrationModel.Username">
    </div>
    <div class="form-group">
        <label for="password">Password</label>
        <input type="password" class="form-control" id="password" @bind="registrationModel.Password">
    </div>
    <div class="form-group">
        <label for="firstName">First Name</label>
        <input type="text" class="form-control" id="firstName" @bind="registrationModel.FirstName">
    </div>
    <div class="form-group">
        <label for="lastName">Last Name</label>
        <input type="text" class="form-control" id="lastName" @bind="registrationModel.LastName">
    </div>
    <div class="form-group">
        <label for="email">Email</label>
        <input type="email" class="form-control" id="email" @bind="registrationModel.Email">
    </div>
    <div class="form-group">
        <label for="userRole">Role</label>
        <select class="form-control" id="userRole" @bind="registrationModel.UserRole">
            <option value="1">Admin</option>
            <option value="2">Management</option>
            <option value="3">Auditor</option>
        </select>
    </div>
    <div class="form-group">
        <label for="birthDate">Birth Date</label>
        <input type="date" class="form-control" id="birthDate" @bind="registrationModel.BirthDate">
    </div>
    <div class="form-group">
        <label for="phoneNumber">Phone Number</label>
        <input type="text" class="form-control" id="phoneNumber" @bind="registrationModel.PhoneNumber">
    </div>
    <button type="submit" class="btn btn-primary">Register</button>
</form>

@code {
    private Users users;
    private RegistrationModel registrationModel = new RegistrationModel();
    private string API = "";
    protected override async Task OnInitializedAsync()
    {
        API = configuration.GetSection("APIURI").Get<string>()!;
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        var loginRoot = await localStorage.GetItemAsync<LoginRoot>("user");
        if (loginRoot != null && loginRoot.data != null && !string.IsNullOrEmpty(loginRoot.data.token))
        {
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", loginRoot.data.token);
        }

        var response = await Http.GetAsync(API+"Account/GetUsers");
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            users = JsonSerializer.Deserialize<Users>(content, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });
        }
        else
        {
            // Handle error
        }
    }
      /// <summary>
    /// Changes the password for the specified user.
    /// </summary>
    private async Task ChangePassword(UserModel user)
    {
        var newPassword = await jsRuntime.InvokeAsync<string>("prompt", "Enter new password:");
        if (string.IsNullOrWhiteSpace(newPassword))
            return;

        var formData = new MultipartFormDataContent();
        formData.Add(new StringContent(user.id), "UserId");
        formData.Add(new StringContent(newPassword), "Password");

        var response = await Http.PostAsync(API+"Account/newPassword", formData);
        if (response.IsSuccessStatusCode)
        {
            await jsRuntime.InvokeVoidAsync("alert", "Password changed successfully.");
        }
        else
        {
            // Handle error
        }
    }
     /// <summary>
    /// Registers a new user.
    /// </summary>
    private async Task RegisterUser()
    {
        var formData = new MultipartFormDataContent();
        formData.Add(new StringContent(registrationModel.PhoneNumber), "PhoneNumber");
        formData.Add(new StringContent(registrationModel.Password), "Password");
        formData.Add(new StringContent(registrationModel.FirstName), "FirstName");
        formData.Add(new StringContent(registrationModel.LastName), "LastName");
        formData.Add(new StringContent(registrationModel.UserRole.ToString()), "UserRole");
        formData.Add(new StringContent(registrationModel.BirthDate.ToString("yyyy-MM-dd")), "BirthDate");
        formData.Add(new StringContent(registrationModel.Email), "Email");
        formData.Add(new StringContent(registrationModel.Username), "Username");

        var response = await Http.PostAsync(API+"Account/Register", formData);
        if (response.IsSuccessStatusCode)
        {
            await jsRuntime.InvokeVoidAsync("alert", "User registered successfully.");
            registrationModel = new RegistrationModel(); // Clear registration form
        }
        else
        {
            // Handle error
        }
    }
        /// <summary>
    /// Deletes the specified user.
    /// </summary>
    private async Task DeleteUser(UserModel user)
    {
        if (IsAdmin(user))
        {
            await jsRuntime.InvokeVoidAsync("alert", "Cannot delete admin user.");
            return;
        }

        var confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this user?");
        if (confirmed)
        {
            var response = await Http.DeleteAsync(API+$"Account/Delete/{user.id}");
            if (response.IsSuccessStatusCode)
            {
                await LoadUsers();
            }
            else
            {
                // Handle error
            }
        }
    }

    private bool IsAdmin(UserModel user)
    {
        return user.roles.Any(r => r.name == "Admin");
    }


    // Models
    public class RegistrationModel
    {
        public string PhoneNumber { get; set; }
        public string Password { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public int UserRole { get; set; }
        public DateTime BirthDate { get; set; }
        public string Email { get; set; }
        public string Username { get; set; }
    }

    public class ChangePasswordModel
    {
        public string NewPassword { get; set; }
        public string ConfirmPassword { get; set; }
    }

    public class UserModel
    {
        public string id { get; set; }
        public string username { get; set; }
        public string firstName { get; set; }
        public string lastName { get; set; }
        public string phoneNumber { get; set; }
        public string email { get; set; }
        public string picture { get; set; }
        public string dateOfBirth { get; set; }
        public string createdDate { get; set; }
        public List<RoleModel> roles { get; set; }
    }
    public class Users
    {
        public int errorCode { get; set; }
        public string errorMessage { get; set; }
        public bool success { get; set; }
        public List<UserModel> data { get; set; }
    }
    public class RoleModel
    {
        public int id { get; set; }
        public string name { get; set; }
    }
}
